version: '3.9'

services:
  postgresql:
    image: postgres:13
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
    ports:
      - "5432:5432"
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.20.0
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    ports:
      - "7233:7233"
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal-admin-tools:
    image: temporalio/admin-tools:1.20.0
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    networks:
      - temporal-network

  temporal-web:
    image: temporalio/web:1.15.0
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - "8088:8088"
    networks:
      - temporal-network

  order:
    restart: on-failure
    build:
      context: ./order
      dockerfile: Dockerfile
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
    ports:
      - "8081:8081"
    networks:
      - temporal-network
    depends_on:
      temporal:
        condition: service_healthy

  payment:
    restart: on-failure
    build:
      context: ./payment
      dockerfile: Dockerfile
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
    networks:
      - temporal-network
    depends_on:
      temporal:
        condition: service_healthy

  inventory:
    restart: on-failure
    build:
      context: ./inventory
      dockerfile: Dockerfile
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
    networks:
      - temporal-network
    depends_on:
      temporal:
        condition: service_healthy

  delivery:
    restart: on-failure
    build:
      context: ./delivery
      dockerfile: Dockerfile
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
    networks:
      - temporal-network
    depends_on:
      temporal:
        condition: service_healthy

networks:
  temporal-network:
    driver: bridge
